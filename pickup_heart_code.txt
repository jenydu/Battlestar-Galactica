
# FUNCTION: PAINT_PICKUP_HEART
	# Registers Used
		# $s0: stores current color value
		# $s1: temporary memory address storage for current unit (in bitmap)
		# $s2: row index for 'for loop' LOOP_PICKUP_HEART_ROW
		# $s3: column index for 'for loop' LOOP_PICKUP_HEART_COLUMN
		# $s4: parameter for subfunction LOOP_PICKUP_HEART_COLUMN
PAINT_PICKUP_HEART:
	    # Store used registers in the stack
	    push_reg_to_stack ($ra)
	    push_reg_to_stack ($s0)
	    push_reg_to_stack ($s1)
	    push_reg_to_stack ($s2)
	    push_reg_to_stack ($s3)
	    push_reg_to_stack ($s4)
    
	    # Initialize registers
	    add $s0, $0, $0				# initialize current color to black
	    add $s1, $0, $0				# holds temporary memory address
	    add $s2, $0, $0	
	    add $s3, $0, $0
	    add $s4, $0, $0

		LOOP_PICKUP_HEART_ROW: bge $s2, row_max, EXIT_PAINT_PICKUP_HEART
				# Boolean Expressions: Paint in based on row index
			PICKUP_HEART_COND:
					beq $s2, 1024, PICKUP_HEART_ROW_1
					beq $s2, 2048, PICKUP_HEART_ROW_2
					beq $s2, 3072, PICKUP_HEART_ROW_3
					beq $s2, 4096, PICKUP_HEART_ROW_4
					beq $s2, 5120, PICKUP_HEART_ROW_5
					beq $s2, 6144, PICKUP_HEART_ROW_6

					j UPDATE_PICKUP_HEART_ROW
			PICKUP_HEART_ROW_1:
					setup_general_paint (0x000000, 0, 4, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xd63a3a, 4, 8, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xe92828, 8, 12, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0x5b0000, 12, 16, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xe30000, 16, 20, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xd90000, 20, 24, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0x000000, 24, 28, LOOP_PICKUP_HEART_COLUMN)
					j UPDATE_PICKUP_HEART_ROW
			PICKUP_HEART_ROW_2:
					setup_general_paint (0x5c0000, 0, 4, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xff4141, 4, 8, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xff0000, 8, 20, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xf60000, 20, 24, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0x580000, 24, 28, LOOP_PICKUP_HEART_COLUMN)
					j UPDATE_PICKUP_HEART_ROW
			PICKUP_HEART_ROW_3:
					setup_general_paint (0x000000, 0, 4, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xff0000, 4, 20, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xe80000, 20, 24, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0x000000, 24, 28, LOOP_PICKUP_HEART_COLUMN)
					j UPDATE_PICKUP_HEART_ROW
			PICKUP_HEART_ROW_4:
					setup_general_paint (0x000000, 0, 4, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0x750000, 4, 8, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xff0000, 8, 20, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0x710000, 20, 24, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0x000000, 24, 28, LOOP_PICKUP_HEART_COLUMN)
					j UPDATE_PICKUP_HEART_ROW
			PICKUP_HEART_ROW_5:
					setup_general_paint (0x000000, 0, 8, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0x710000, 8, 12, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0xff0000, 12, 16, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0x6b0000, 16, 20, LOOP_PICKUP_HEART_COLUMN)
					j UPDATE_PICKUP_HEART_ROW
			PICKUP_HEART_ROW_6:
					setup_general_paint (0x000000, 0, 12, LOOP_PICKUP_HEART_COLUMN)
					setup_general_paint (0x310000, 12, 16, LOOP_PICKUP_HEART_COLUMN)
					j UPDATE_PICKUP_HEART_ROW

    	UPDATE_PICKUP_HEART_ROW:				# Update row value
    	    	addi $s2, $s2, row_increment
	        	j LOOP_PICKUP_HEART_ROW

    	# FOR LOOP: (through column)
    	# Paints in column from $s3 to $s4 at some row
    	LOOP_PICKUP_HEART_COLUMN: bge $s3, $s4, EXIT_LOOP_PICKUP_HEART_COLUMN	# branch to UPDATE_PICKUP_HEART_COL; if column index >= last column index to paint
        		addi $s1, $0, display_base_address			# Reinitialize t2; temporary address store
        		add $s1, $s1, $s2				# update to specific row from base address
        		add $s1, $s1, $s3				# update to specific column
        		sw $s0, ($s1)					# paint in value

        		# Updates for loop index
        		addi $s3, $s3, column_increment			# t4 += row_increment
        		j LOOP_PICKUP_HEART_COLUMN				# repeats LOOP_PICKUP_HEART_ROW
	    EXIT_LOOP_PICKUP_HEART_COLUMN:
		        jr $ra

    	# EXIT FUNCTION
       	EXIT_PAINT_PICKUP_HEART:
        		# Restore used registers
	    		pop_reg_from_stack ($s4)
	    		pop_reg_from_stack ($s3)
	    		pop_reg_from_stack ($s2)
	    		pop_reg_from_stack ($s1)
	    		pop_reg_from_stack ($s0)
        		pop_reg_from_stack ($ra)
        		jr $ra						# return to previous instruction
