
# FUNCTION: PAINT_ASTEROID
	# Registers Used
		# $s0: stores current color value
		# $s1: temporary memory address storage for current unit (in bitmap)
		# $s2: row index for 'for loop' LOOP_ASTEROID_ROW
		# $s3: column index for 'for loop' LOOP_ASTEROID_COLUMN
		# $s4: parameter for subfunction LOOP_ASTEROID_COLUMN
PAINT_ASTEROID:
	    # Store used registers in the stack
	    push_reg_to_stack ($ra)
	    push_reg_to_stack ($s0)
	    push_reg_to_stack ($s1)
	    push_reg_to_stack ($s2)
	    push_reg_to_stack ($s3)
	    push_reg_to_stack ($s4)
    
	    # Initialize registers
	    add $s0, $0, $0				# initialize current color to black
	    add $s1, $0, $0				# holds temporary memory address
	    add $s2, $0, $0	
	    add $s3, $0, $0
	    add $s4, $0, $0

		LOOP_ASTEROID_ROW: bge $s2, row_max, EXIT_PAINT_ASTEROID
				# Boolean Expressions: Paint in based on row index
			ASTEROID_COND:
					beq $s2, 0, ASTEROID_ROW_0
					beq $s2, 1024, ASTEROID_ROW_1
					beq $s2, 2048, ASTEROID_ROW_2
					beq $s2, 3072, ASTEROID_ROW_3
					beq $s2, 4096, ASTEROID_ROW_4
					beq $s2, 5120, ASTEROID_ROW_5
					beq $s2, 6144, ASTEROID_ROW_6
					beq $s2, 7168, ASTEROID_ROW_7
					beq $s2, 8192, ASTEROID_ROW_8

					j UPDATE_ASTEROID_ROW
			ASTEROID_ROW_0:
					setup_general_paint (0x000000, 0, 8, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x443a33, 8, 12, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x7d6556, 12, 16, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x7c6455, 16, 20, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x564941, 20, 24, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x36312e, 24, 28, LOOP_ASTEROID_COLUMN)
				j UPDATE_ASTEROID_ROW
			ASTEROID_ROW_1:
					setup_general_paint (0x271f1a, 0, 4, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x826858, 4, 8, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x896e5d, 8, 28, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x82695a, 28, 32, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x000000, 32, 36, LOOP_ASTEROID_COLUMN)
				j UPDATE_ASTEROID_ROW
			ASTEROID_ROW_2:
					setup_general_paint (0x7c6454, 0, 4, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x896e5d, 4, 32, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x332923, 32, 36, LOOP_ASTEROID_COLUMN)
				j UPDATE_ASTEROID_ROW
			ASTEROID_ROW_3:
					setup_general_paint (0x896e5d, 0, 32, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x876c5b, 32, 36, LOOP_ASTEROID_COLUMN)
				j UPDATE_ASTEROID_ROW
			ASTEROID_ROW_4:
					setup_general_paint (0x896e5d, 0, 32, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x876d5c, 32, 36, LOOP_ASTEROID_COLUMN)
				j UPDATE_ASTEROID_ROW
			ASTEROID_ROW_5:
					setup_general_paint (0x896e5d, 0, 32, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x615045, 32, 36, LOOP_ASTEROID_COLUMN)
				j UPDATE_ASTEROID_ROW
			ASTEROID_ROW_6:
					setup_general_paint (0x896e5d, 0, 28, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x866b5b, 28, 32, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x000000, 32, 36, LOOP_ASTEROID_COLUMN)
				j UPDATE_ASTEROID_ROW
			ASTEROID_ROW_7:
					setup_general_paint (0x000000, 0, 4, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x876c5b, 4, 8, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x896e5d, 8, 24, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x866c5c, 24, 28, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x8a6e5f, 28, 32, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x000000, 32, 36, LOOP_ASTEROID_COLUMN)
				j UPDATE_ASTEROID_ROW
			ASTEROID_ROW_8:
					setup_general_paint (0x000000, 0, 4, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x40342c, 4, 8, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x896e5d, 8, 16, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x69564b, 16, 20, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x342f2d, 20, 24, LOOP_ASTEROID_COLUMN)
					setup_general_paint (0x161515, 24, 28, LOOP_ASTEROID_COLUMN)
				j UPDATE_ASTEROID_ROW

    	UPDATE_ASTEROID_ROW:				# Update row value
    	    	addi $s2, $s2, row_increment
	        	j LOOP_ASTEROID_ROW

    	# FOR LOOP: (through column)
    	# Paints in column from $s3 to $s4 at some row
    	LOOP_ASTEROID_COLUMN: bge $s3, $s4, EXIT_LOOP_ASTEROID_COLUMN	# branch to UPDATE_ASTEROID_COL; if column index >= last column index to paint
        		addi $s1, $0, display_base_address			# Reinitialize t2; temporary address store
        		add $s1, $s1, $s2				# update to specific row from base address
        		add $s1, $s1, $s3				# update to specific column
        		sw $s0, ($s1)					# paint in value

        		# Updates for loop index
        		addi $s3, $s3, column_increment			# t4 += row_increment
        		j LOOP_ASTEROID_COLUMN				# repeats LOOP_ASTEROID_ROW
	    EXIT_LOOP_ASTEROID_COLUMN:
		        jr $ra

    	# EXIT FUNCTION
       	EXIT_PAINT_ASTEROID:
        		# Restore used registers
	    		pop_reg_from_stack ($s4)
	    		pop_reg_from_stack ($s3)
	    		pop_reg_from_stack ($s2)
	    		pop_reg_from_stack ($s1)
	    		pop_reg_from_stack ($s0)
        		pop_reg_from_stack ($ra)
        		jr $ra						# return to previous instruction
